1) Ecribe un programa en ensamblador que sume los elementos de dos arreglos de 
enteros de igual longitud y almacene el resultado en un tercer arreglo. Los 
arreglos comienzan en las direcciones de memoria 0200h y 0300h respectivamente, y
el resultado debe almacenarse a partir de la dirección 0400h. El programa debe 
comenzar en la dirección 0100h.

(supongo que la longitud es 10)

.org 100h 
    mov cx, 000ah
    mov si, 0200h
    mov di, 0300h
    mov bx, 0400h 

    primera: 
        mov ax, [si]
        add [bx],ax
        dec cx 
        inc bx
        inc bx
        inc si 
        cmp cx, 00h
        jne primera

    mov cx,000ah 

    segunda:
        mov ax, [di]
        add [bx],ax
        dec cx 
        inc bx
        inc bx
        inc di 
        cmp cx, 00h
        jne segunda 

    int 20h


.ret

-> este hace esto: cad a: [1,2,3] cad b: [2,3,5]; cadena resultante: [1+2, 2+3,]
.org 100h 

    mov cx, 000ah
    mov si, 0200h
    mov di, 0300h
    mov bx, 0400h
sumar: 
        mov ax,[si]
        mov dx,[di]
        add ax, dx
        mov [bx],ax 
        inc si
        inc di 
        inc bx
        dec cx
        cmp cx,00h
        jne sumar

.ret



2) Crea un programa en ensamblador que encuentre la suma de los dígitos de un 
número entero de 16 bits. El número comienza en la dirección de memoria 0200h. El
 resultado debe ser almacenado en la dirección de memoria 0400h. El programa debe 
comenzar en la dirección 0100h.

    .org 100h
    
    mov si, 0200h       ; Dirección del número entero
    mov di, 0400h       ; Dirección para almacenar el resultado
    mov cx, 4           ; Inicializar contador para recorrer los cuatro dígitos

    mov ax, 0           ; Inicializar acumulador para la suma de los dígitos

    sum_digits:
        mov bx, 10      ; Divisor para obtener el dígito menos significativo
        div bx          ; Divide ax por 10, resultado en ax, residuo en dx
        add ax, dx      ; Sumar el dígito al acumulador
        loop sum_digits ; Repetir el proceso para los 4 dígitos

    mov [di], ax        ; Almacenar la suma en la dirección de memoria 0400h

    .ret


3) Hay dos cadenas con numeros se ubbcan en 0200h, y 0300h cada una tiene
 5 numeros, hay que sumar cada uno segun su posicion respectivamente y ubicarlo en
 la posicion 


; Dos cadenas de caracteres, A y B, de longitudes iguales e igual al dato almacenado en la
;dirección 0500h comienzan en las direcciones 0200h la cadena A y 0300h la cadena B.
;Armar una cadena de caracteres C a partir de la dirección 0400h intercalando cada
;elemento de la cadena A con cada elemento de la cadena B uno a uno. El programa
;comienza en la dirección 0100h

org 100h

    mov cx,[0500h]
    mov si,0200h
    mov di,0300h
    mov bx,0400h
loop:
    mov ax, [si]
    mov [bx],ax
    inc bx
    inc si
    mov ax, [di]
    mov [bx],ax
    inc bx
    inc di
    dec cx
    cmp cx, 00h
    jne loop

ret


invertir la cadena 'mircoprocesador'

.org

jmp start 

ms db 'mircoprocesador',0

next_char:
    mov si,0

start:
    mov al,ms[si]
    cmp al,0h
    je inverse
    mov ah,0eh
    int 10h
    inc si 
    jmp next_char

inverse:
    mov al,ms[si-1]
    cmp si,0h
    je stop
    mov ah,0eh
    int 10h 
    dec si
    jmp inverse

stop:
    int 21h

.ret